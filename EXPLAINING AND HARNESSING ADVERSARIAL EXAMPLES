#1.环境准备
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
import matplotlib.pyplot as plt
import numpy as np



#2.定义MNIST分类模型
class MNIST_Classifier(nn.Module):
    def __init__(self):
        super(MNIST_Classifier, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, 3)  # 输入通道1，输出通道32，卷积核3x3
        self.conv2 = nn.Conv2d(32, 64, 3)
        self.fc1 = nn.Linear(64*5*5, 128)  # 全连接层输入尺寸需根据卷积输出调整
        self.fc2 = nn.Linear(128, 10)     # 输出10类（0-9）

    def forward(self, x):
        x = torch.relu(self.conv1(x))
        x = torch.max_pool2d(x, 2)        # 池化层，尺寸减半
        x = torch.relu(self.conv2(x))
        x = torch.max_pool2d(x, 2)
        x = x.view(-1, 64*5*5)            # 展平为全连接层输入
        x = torch.relu(self.fc1(x))
        x = self.fc2(x)
        return x

model = MNIST_Classifier()





#3.训练模型
# 超参数
batch_size = 64
epochs = 5
lr = 0.001

# 数据加载
transform = transforms.Compose([transforms.ToTensor()])
train_data = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
test_data = datasets.MNIST(root='./data', train=False, download=True, transform=transform)
train_loader = torch.utils.data.DataLoader(train_data, batch_size=batch_size, shuffle=True)
test_loader = torch.utils.data.DataLoader(test_data, batch_size=batch_size, shuffle=False)

# 优化器和损失函数
optimizer = optim.Adam(model.parameters(), lr=lr)
criterion = nn.CrossEntropyLoss()

# 训练循环
for epoch in range(epochs):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        optimizer.zero_grad()
        output = model(data)
        loss = criterion(output, target)
        loss.backward()
        optimizer.step()
    print(f"Epoch {epoch+1}/{epochs}，训练损失:{loss.item():.4f}")




#4.FGSM攻击函数
def fgsm_attack(image, epsilon, data_grad):
    # 获取梯度的符号方向
    sign_data_grad = data_grad.sign()
    # 生成扰动并限制像素范围[0,1]
    perturbed_image = image + epsilon * sign_data_grad
    perturbed_image = torch.clamp(perturbed_image, 0, 1)
    return perturbed_image



#5.测试模型并生成对抗样本
def test_with_fgsm(model, device, test_loader, epsilon):
    model.eval()
    correct = 0
    total = 0

    for data, target in test_loader:
        data, target = data.to(device), target.to(device)
        data.requires_grad = True  # 需要计算梯度

        # 前向传播
        output = model(data)
        _, pred = torch.max(output, 1)

        # 如果原始预测正确，则生成对抗样本
        #if pred.size() == torch.Size([1]) and target.size() == torch.Size([1]):
            #if pred.item() == target.item():
        if pred.sum().item() == target.sum().item():
            # 计算损失并反向传播
            loss = criterion(output, target)
            model.zero_grad()
            loss.backward()
            data_grad = data.grad.data

            # 生成对抗样本
            perturbed_data = fgsm_attack(data, epsilon, data_grad)

            # 测试对抗样本
            output_adv = model(perturbed_data)
            _, pred_adv = torch.max(output_adv, 1)
            total += 1
            if pred_adv.sum().item() == target.sum().item():
                correct += 1

    # 计算攻击成功率
    accuracy = 100 * correct / total
    print(f"Epsilon: {epsilon}\t对抗样本准确率: {accuracy:.2f}%")
    return accuracy



#6.执行攻击并可视化结果
# 参数设置
epsilon = 0.3  # 扰动强度
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = model.to(device)

# 测试原始模型准确率
model.eval()
correct = 0
total = 0
with torch.no_grad():
    for data, target in test_loader:
        data, target = data.to(device), target.to(device)
        outputs = model(data)
        _, predicted = torch.max(outputs.data, 1)
        total += target.size(0)
        correct += (predicted == target).sum().item()
print(f"原始模型测试准确率: {100 * correct / total:.2f}%")

# 生成对抗样本并评估
test_with_fgsm(model, device, test_loader, epsilon)

# 可视化对抗样本
data, target = next(iter(test_loader))
data, target = data.to(device), target.to(device)
data.requires_grad = True
output = model(data)
loss = criterion(output, target)
loss.backward()
data_grad = data.grad.data
perturbed_data = fgsm_attack(data, epsilon, data_grad)

# 显示原始图像和对抗样本
plt.figure(figsize=(8, 3))
plt.subplot(1, 2, 1)
plt.title("Original Image")
plt.imshow(data[0].squeeze().cpu().detach(), cmap='gray')
plt.subplot(1, 2, 2)
plt.title(f"Adversarial (ε={epsilon})")
plt.imshow(perturbed_data[0].squeeze().cpu().detach(), cmap='gray')
plt.show()
